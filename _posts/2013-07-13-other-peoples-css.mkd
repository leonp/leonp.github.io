---
date: 2013-07-13 10:58:57+00:00
layout: post
title: Other people&#8217;s code
excerpt: How to take an existing website, make cosmetic changes and remain fairly sane.
---

My employer, <a href="http://suffolklibraries.co.uk">Suffolk Libraries</a>, has a complicated web presence. There's:

* A website built on the <a href="http://www.silverstripe.com/">SilverStripe CMS</a>
* A library catalogue built on <a href="http://civicalld.com/our-services/spydus">Spydus</a>
* An ebook service hosted by <a href="http://suffolklibraries.lib.overdrive.com/F4447395-FC27-47A7-8466-4E9776161F28/10/50/en/Default.htm">Overdrive</a>

To further muddy the waters, the catalogue has been styled to look like the website. The website has major <abbr title="Information Architecture">IA</abbr> and styling problems while the catalogue boasts a useless search engine, a problem exacerbated by an attempt to *present* as an Amazon&#8211;like simple search box. As you may know, <a href="/2013/06/libraries-should-invest-millions-in-search-engines/">Amazon has a fairly powerful search engine that makes a simple, single search box possible</a>.

My short term plan is to decouple the website from the catalogue and fix its pressing IA and styling problems. There won't be many HTML changes as the long term plan is to rebuild the website so it incorporates the catalogue.

So I have to deal with other people's <abbr title="HyperText Markup Language">HTML</abbr> and <abbr title="Cascading Style Sheets">CSS</abbr>.

Aside from the annoying differences in style and notation (I don't like camel case, the previous designer did), building on other people's code (rather than ripping everything up and starting again) poses a couple of practical problems:

* *Unnecessary and baffling selectors*: Sometimes the previous programmer has used an ID, sometimes a class. Sometimes she's named the main content area something like `#sidecontent` rather than `#content`, and nested that within a `#borderTop` div. It takes a lot of unravelling.
* *Insane specificity*: `.sideContentRight #sideContent #sideNav` is more specific than `#sideNav`, which means I have to play tree detective rather than just style `#sideNav`.

I've used 3 techniques to overcome these problems.

* *Put my changes in a separate stylesheet*: It's nigh on impossible to identify changes when they sit side by side with the original CSS. Separating my CSS from the original makes it easier to track and manage.
* *Perform a layout reset*: Resetting overly specific selectors takes a lot of time and code. It's far quicker and more efficient to identify all the final classes and IDs of selector chains and reset them to `width: 100%; max-width: 100%; min-width: 0; float: auto;`. This is a justified use of `!important`.
* *Limit the <a href="http://smacss.com/book/applicability">depth of applicability</a>*: When I do add small bits of new HTML, I make sure class names are abstracted and only apply to one, reusable page element. That way, they can't do damage anywhere else.

Of course, knowing where to stop the changes is a difficult call. At some point it's tempting to rip it up and start again.